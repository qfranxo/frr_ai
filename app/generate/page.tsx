'use client';

import { useState, useEffect, useRef, Suspense } from 'react';
import { Sparkles, Share2, Download, X, AlertCircle, AlertTriangle } from 'lucide-react';
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { useSearchParams, useRouter } from 'next/navigation';
import { toast } from 'sonner';
import Image from 'next/image';
import { useUser, SignInButton } from '@clerk/nextjs';
import Link from 'next/link';
import { IMAGE_GENERATION_CONFIG } from '@/config/imageGeneration';
import { modelStyleMapping } from "@/config/styleMapping";
import { sql } from 'drizzle-orm';
import { isReplicateUrl, isValidImageUrl } from "@/utils/image-utils";

// Íµ¨ÎèÖ Ï†ïÎ≥¥ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
interface SubscriptionInfo {
  tier: 'free' | 'starter' | 'premium';
  maxGenerations: number;
  remaining: number;
  renewalDate: Date;
}

// Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï∂îÍ∞Ä
interface GeneratedImage {
  id: string;
  imageUrl: string;
  prompt: string;
  style: string;
  renderingStyle?: string; // Î†åÎçîÎßÅ Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
  author: string;
  createdAt: string;
  gender: string;
  age: string;
  ratio: string;
  cameraDistance: string;
  isShared?: boolean; // Í≥µÏú† ÏôÑÎ£å ÏÉÅÌÉú Ï∂îÍ∞Ä
  isSharing?: boolean; // Í≥µÏú† ÏßÑÌñâ Ï§ë ÏÉÅÌÉú Ï∂îÍ∞Ä
  storagePath?: string; // Ï∂îÍ∞ÄÎêú Ïä§ÌÜ†Î¶¨ÏßÄ Í≤ΩÎ°ú Ï∂îÍ∞Ä
  aspectRatio?: string; // Ï∂îÍ∞Ä: ÎπÑÏú®Ïùò Îã§Î•∏ Ïù¥Î¶Ñ
}

// Í≥µÌÜµ Ïä§ÌÉÄÏùº Ï†ïÏùò
const commonClassName = "w-full max-w-3xl mx-auto";

// Î°úÎî© Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
const LoadingModal = ({ 
  isVisible, 
  progress, 
  message 
}: { 
  isVisible: boolean; 
  progress: number;
  message: string;
}) => {
  if (!isVisible) return null;
  
  return (
    <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-[99999]" style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, transform: 'translateZ(0)', willChange: 'transform', isolation: 'isolate' }}>
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.3 }}
        className="w-[calc(100%-2rem)] max-w-xs md:max-w-sm mx-auto bg-white rounded-xl p-4 md:p-6 shadow-2xl border-2 border-blue-100"
      >
        <div className="text-center">
          <div className="w-16 h-16 md:w-20 md:h-20 rounded-full bg-gradient-to-br from-blue-50 to-indigo-50 mx-auto mb-4 md:mb-6 flex items-center justify-center border border-blue-100">
            <Sparkles className="w-8 h-8 md:w-10 md:h-10 text-blue-500 animate-pulse" />
          </div>
          <h3 className="text-lg md:text-xl font-semibold text-gray-800 mb-1.5 md:mb-2">
            Creating AI Model...
          </h3>
          <p className="text-sm md:text-base text-gray-600 mb-4 md:mb-6">
            {message}
          </p>
          
          {/* Î°úÎî© ÌîÑÎ°úÍ∑∏Î†àÏä§ Î∞î */}
          <div className="h-2 md:h-3 w-full bg-gray-100 rounded-full overflow-hidden mb-2 md:mb-3 border border-gray-200">
            <motion.div 
              className="h-full bg-gradient-to-r from-blue-400 to-indigo-500"
              initial={{ width: "0%" }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 0.3 }}
            />
          </div>
          <p className="text-xs md:text-sm text-gray-600 font-medium">{Math.round(progress)}%</p>
        </div>
      </motion.div>
    </div>
  );
};

// API ÏÑúÎπÑÏä§ ÌïúÎèÑ ÏïåÎ¶º Ïª¥Ìè¨ÎÑåÌä∏
const ServiceLimitAlert = ({ isVisible, onClose }: { isVisible: boolean, onClose: () => void }) => {
  if (!isVisible) return null;
  
  return (
    <div className="fixed bottom-4 right-4 max-w-md p-4 bg-amber-50 border border-amber-200 rounded-xl shadow-lg z-50">
      <div className="flex gap-3">
        <div className="text-amber-500 flex-shrink-0">
          <AlertTriangle size={24} />
        </div>
        <div className="flex-1">
          <h3 className="text-sm font-medium text-amber-800 mb-1">Service Usage Limit Notice</h3>
          <p className="text-xs text-amber-700 mb-2">
            The image generation service has reached its API limit. Try these options:
          </p>
          <ul className="text-xs text-amber-700 list-disc pl-4 space-y-1 mb-3">
            <li>Try again in a few minutes</li>
            <li>Try a different style option</li>
            <li>Try a different ratio or rendering style</li>
          </ul>
          <div className="flex justify-end">
            <button
              onClick={onClose}
              className="text-xs bg-amber-100 hover:bg-amber-200 text-amber-800 px-3 py-1 rounded-md transition-colors"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Íµ¨ÎèÖ ÏÉÅÌÉú ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
interface SubscriptionStatusProps {
  subscription: {
    tier?: string;
    maxGenerations: number;
    remaining: number;
    renewalDate?: Date;
  } | null;
}

const SubscriptionStatus = ({ subscription }: SubscriptionStatusProps) => {
  const [isLoading, setIsLoading] = useState(true);
  
  // Î°úÎî© ÏÉÅÌÉúÏùº Îïå Ïä§ÏºàÎ†àÌÜ§ UI ÌëúÏãú
  useEffect(() => {
    if (subscription) {
      // Îç∞Ïù¥ÌÑ∞Í∞Ä Î°úÎìúÎêòÎ©¥ ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ ÌëúÏãú (ÍπúÎπ°ÏûÑ Î∞©ÏßÄ)
      const timer = setTimeout(() => {
        setIsLoading(false);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [subscription]);
  
  if (isLoading) {
    return (
      <div className="inline-flex items-center bg-white px-3 py-1.5 rounded-full border border-gray-200 shadow-sm">
        <div className="w-16 h-2.5 bg-gray-100 rounded-full overflow-hidden animate-pulse"></div>
        <div className="h-4 w-5 bg-gray-100 rounded animate-pulse mr-0.5"></div>
        <span className="text-gray-300 text-xs mr-0.5">/</span>
        <div className="h-4 w-5 bg-gray-100 rounded animate-pulse"></div>
      </div>
    );
  }
  
  return (
    <div className="inline-flex items-center bg-white px-3 py-1.5 rounded-full border border-gray-200 shadow-sm hover:shadow transition-all">
      <div className="w-16 h-2.5 bg-gray-100 rounded-full overflow-hidden mr-2">
        <div 
          className="h-full bg-gradient-to-r from-blue-400 to-indigo-500 transition-all duration-300"
          style={{ 
            width: `${Math.max(Math.min((subscription?.remaining || 0) / (subscription?.maxGenerations || 1) * 100, 100), 0)}%` 
          }}
        />
      </div>
      <span className="font-bold text-sm text-indigo-600 mr-0.5">
        {subscription?.remaining || 0}
      </span>
      <span className="text-gray-400 text-xs mr-0.5">/</span>
      <span className="text-gray-500 text-xs">
        {subscription?.maxGenerations || 0}
      </span>
    </div>
  );
};

// Ïã§Ï†ú Generate Ïª¥Ìè¨ÎÑåÌä∏ (useSearchParams ÏÇ¨Ïö©)
function GenerateContent() {
  const searchParams = useSearchParams();
  const [prompt, setPrompt] = useState(searchParams?.get('prompt') || '');
  const [background, setBackground] = useState('');
  const [ethicityKeywords, setEthnicityKeywords] = useState<string>('');
  const [selectedRenderStyle, setSelectedRenderStyle] = useState<string>("realistic");
  const [selectedGender, setSelectedGender] = useState<string>("");
  const [selectedAge, setSelectedAge] = useState<string>("youth");
  const [selectedRatio, setSelectedRatio] = useState<string>("1:1");
  const [selectedSize, setSelectedSize] = useState<string>("1024x1024");
  const [selectedStyle, setSelectedStyle] = useState<string>("realistic_image");
  const [selectedClothing, setSelectedClothing] = useState<string>("");
  const [selectedEyes, setSelectedEyes] = useState<string>("");
  const [selectedSkinType, setSelectedSkinType] = useState<string>("");
  const [selectedHairStyle, setSelectedHairStyle] = useState<string>("");
  const [selectedBackground, setSelectedBackground] = useState<string>("");
  const [temporaryRatio, setTemporaryRatio] = useState<string>("1:1");
  const [selectedCameraDistance, setSelectedCameraDistance] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const resultRef = useRef<HTMLDivElement>(null);
  const loadingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const topRef = useRef<HTMLDivElement>(null);
  const [results, setResults] = useState<GeneratedImage[]>([]);
  const [isScrolling, setIsScrolling] = useState(false);
  const { isSignedIn, user } = useUser();
  const [history, setHistory] = useState<GeneratedImage[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [showLoadingModal, setShowLoadingModal] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingMessage, setLoadingMessage] = useState("Analyzing your prompt...");
  const [aspectRatioLocked, setAspectRatioLocked] = useState(false);
  const [genderAgeLocked, setGenderAgeLocked] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState("");
  const [showLimitModal, setShowLimitModal] = useState(false);
  const [showServiceLimitAlert, setShowServiceLimitAlert] = useState(false);
  const [subscription, setSubscription] = useState<SubscriptionInfo | null>(null);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const router = useRouter();

  const renderStyleOptions = [
    { id: "realistic", label: "Realistic", emoji: "üì∑", description: "Photo-realistic style" },
    { id: "anime", label: "Animation", emoji: "üé®", description: "Cartoon/anime style" }
  ];

  const cameraDistanceOptions = [
    { id: "close_up", label: "Close-up", emoji: "üîç", description: "upper focus" },
    { id: "medium", label: "Medium", emoji: "üë§", description: "Standard portrait view" },
    { id: "far", label: "Far", emoji: "üèûÔ∏è", description: "Full body with environment" }
  ];

  // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú Í≤ÄÏÉâÏñ¥ÏôÄ Ïπ¥ÌÖåÍ≥†Î¶¨ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (!searchParams) return;
    
    // ÌîÑÎ°¨ÌîÑÌä∏ ÌååÎùºÎØ∏ÌÑ∞ Ï≤òÎ¶¨
    const searchText = searchParams.get('prompt');
    if (searchText) {
      setPrompt(searchText);
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ï≤òÎ¶¨
    const categoryParam = searchParams.get('category');
    if (categoryParam) {
      // Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îî∞Îùº Í∏∞Î≥∏ ÏòµÏÖò ÏÑ§Ï†ï
      switch(categoryParam) {
        case 'portrait':
          setSelectedRenderStyle('realistic');
          setSelectedStyle('realistic_image');
          break;
        case 'anime':
          setSelectedRenderStyle('anime');
          setSelectedStyle('digital_illustration');
          break;
        case 'landscape':
        case 'urban':
          // ÌíçÍ≤Ω/ÎèÑÏãú Ïπ¥ÌÖåÍ≥†Î¶¨Îäî 16:9 ÎπÑÏú® ÏÑ§Ï†ï
          setTemporaryRatio('16:9');
          setSelectedRatio('16:9');
          // ÎπÑÏú®Ïóê Îî∞Î•∏ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
          const ratioConfig = IMAGE_GENERATION_CONFIG.aspectRatios.find(r => r.id === '16:9');
          if (ratioConfig) {
            setSelectedSize(ratioConfig.size);
          }
          break;
      }
    }
    
    // localStorageÏóêÏÑú Ï†ÄÏû•Îêú ÌîÑÎ°¨ÌîÑÌä∏ Î∞è ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
    try {
      const savedFormData = localStorage.getItem('savedGenerateFormData');
      if (savedFormData) {
        const data = JSON.parse(savedFormData);
        if (data.prompt) setPrompt(data.prompt);
        if (data.background) setBackground(data.background);
        if (data.renderStyle) setSelectedRenderStyle(data.renderStyle);
        if (data.gender) setSelectedGender(data.gender);
        if (data.age) setSelectedAge(data.age);
        if (data.ratio) {
          setSelectedRatio(data.ratio);
          setTemporaryRatio(data.ratio);
        }
        if (data.style) setSelectedStyle(data.style);
        if (data.clothing) setSelectedClothing(data.clothing);
        if (data.eyes) setSelectedEyes(data.eyes);
        if (data.skinType) setSelectedSkinType(data.skinType);
        if (data.hairStyle) setSelectedHairStyle(data.hairStyle);
        if (data.cameraDistance) setSelectedCameraDistance(data.cameraDistance);
        
        // Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò® ÌõÑ ÏÇ≠Ï†ú
        localStorage.removeItem('savedGenerateFormData');
      }
    } catch (error) {
      console.error('Error loading saved prompt:', error);
    }
  }, [searchParams]);

  // Íµ¨ÎèÖ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (isSignedIn) {
      fetchSubscriptionInfo();
    }
  }, [isSignedIn]);

  // ÏÉùÏÑ± ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú
  useEffect(() => {
    if (isSignedIn) {
      loadGenerationHistory();
    }
  }, [isSignedIn]);

  const genderOptions = [
    { id: "male", label: "Male", emoji: "üë®" },
    { id: "female", label: "Female", emoji: "üë©" }
  ];

  const ageOptions = [
    { id: "children", label: "Children", emoji: "üë∂" }, // 5~10ÏÑ∏ Ïñ¥Î¶∞Ïù¥
    { id: "youth", label: "Youth", emoji: "üë®‚Äçüíº" },
    { id: "elderly", label: "Elderly", emoji: "üë¥" }
  ];

  // Î°úÎî© ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const startLoadingProgress = () => {
    // ÏßÑÌñâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setLoadingProgress(0);
    setLoadingMessage("Analyzing your prompt...");
    setShowLoadingModal(true);
    
    // Ïù¥Ï†Ñ Ïù∏ÌÑ∞Î≤å ÌÅ¥Î¶¨Ïñ¥
    if (loadingIntervalRef.current) {
      clearInterval(loadingIntervalRef.current);
    }
    
    // 0-70%ÍπåÏßÄ Îπ†Î•¥Í≤å (30ms Í∞ÑÍ≤©)
    loadingIntervalRef.current = setInterval(() => {
      setLoadingProgress(prev => {
        if (prev >= 70) {
          clearInterval(loadingIntervalRef.current!);
          
          setLoadingMessage("Generating model features...");
          
          // 70-100%ÍπåÏßÄ Ï≤úÏ≤úÌûà (150ms Í∞ÑÍ≤©)
          loadingIntervalRef.current = setInterval(() => {
            setLoadingProgress(prev => {
              if (prev >= 90) {
                setLoadingMessage("Refining details...");
              }
              
              if (prev >= 99) {
                clearInterval(loadingIntervalRef.current!);
                return 99; // 99%ÏóêÏÑú Î©àÏ∂îÍ≥† Ïã§Ï†ú ÏôÑÎ£å Ïãú 100%Î°ú ÏÑ§Ï†ï
              }
              return prev + 0.5;
            });
          }, 150);
          
          return 70;
        }
        return prev + 2;
      });
    }, 30);
  };

  // Î°úÎî© ÏôÑÎ£å Ï≤òÎ¶¨
  const completeLoading = () => {
    if (loadingIntervalRef.current) {
      clearInterval(loadingIntervalRef.current);
    }
    setLoadingProgress(100);
    setLoadingMessage("Complete!");
    
    // Ïû†Ïãú ÌõÑ Î°úÎî© Î™®Îã¨ Îã´Í∏∞
    setTimeout(() => {
      setShowLoadingModal(false);
    }, 500);
  };

  // Íµ¨ÎèÖ Ï†ïÎ≥¥ Ï°∞Ìöå Ìï®Ïàò
  const fetchSubscriptionInfo = async () => {
    try {
      const response = await fetch("/api/subscription");
      if (response.ok) {
        const data = await response.json();
        setSubscription(data.subscription);
      }
    } catch (error) {
      console.error("Error fetching subscription info:", error);
    }
  };

  // ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ìï®Ïàò
  const loadGenerationHistory = () => {
    try {
      const savedImages = localStorage.getItem('generatedImages');
      if (savedImages) {
        setHistory(JSON.parse(savedImages).slice(0, 2)); // ÏµúÍ∑º 2Í∞úÍπåÏßÄÎßå Î°úÎìú
      }
    } catch (error) {
      console.error('Error loading history:', error);
    }
  };

  // ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï†ÄÏû•
  const saveToHistory = (newImage: GeneratedImage) => {
    try {
      // generatedImagesÏóêÎßå Ï†ÄÏû• (generationHistory ÌÜµÌï©)
      const savedGenerated = localStorage.getItem('generatedImages');
      let generatedImages: GeneratedImage[] = savedGenerated ? JSON.parse(savedGenerated) : [];
      
      // Ï§ëÎ≥µ Ï†úÍ±∞ ÌõÑ ÏµúÏã† Ìï≠Î™© Ï∂îÍ∞Ä
      generatedImages = [
        newImage,
        ...generatedImages.filter(item => item.id !== newImage.id)
      ].slice(0, 10); // ÏµúÎåÄ 10Í∞ú Ìï≠Î™© Ïú†ÏßÄ
      
      localStorage.setItem('generatedImages', JSON.stringify(generatedImages));
      
      // Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏Î•º Î∞úÏÉùÏãúÏºú RecentImageCardsÍ∞Ä ÏûêÎèôÏúºÎ°ú Í∞±Ïã†ÎêòÎèÑÎ°ù Ìï®
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new Event('newImageGenerated'));
      }
      
      setHistory(generatedImages);
    } catch (error) {
      console.error('Error saving to history:', error);
    }
  };

  // ÎπÑÏú® Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ ÏàòÏ†ï - ÏûÑÏãú ÏÉÅÌÉúÎßå Î≥ÄÍ≤Ω
  const handleRatioChange = (ratio: string) => {
    // Ïû†Í∏à ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤Ω Î∂àÍ∞Ä
    if (aspectRatioLocked) return;
    
    // temporaryRatioÏôÄ selectedRatio Î™®Îëê ÏóÖÎç∞Ïù¥Ìä∏
    setTemporaryRatio(ratio);
    setSelectedRatio(ratio);
    
    // ÎπÑÏú®Ïóê Îî∞Î•∏ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
    const selectedRatioConfig = IMAGE_GENERATION_CONFIG.aspectRatios.find(r => r.id === ratio);
    if (selectedRatioConfig) {
      setSelectedSize(selectedRatioConfig.size);
    }
  };

  // ÏÑ±Î≥Ñ ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleGenderSelect = (genderId: string) => {
    // Ïû†Í∏à ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤Ω Î∂àÍ∞Ä
    if (genderAgeLocked) return;
    
    // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Ìï≠Î™©ÏùÑ Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ ÏÑ†ÌÉù Ìï¥Ï†ú (Îπà Î¨∏ÏûêÏó¥Î°ú ÏÑ§Ï†ï)
    if (selectedGender === genderId) {
      setSelectedGender("");
    } else {
      setSelectedGender(genderId);
    }
  };

  // Ïó∞Î†πÎåÄ ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleAgeSelect = (ageId: string) => {
    // Ïû†Í∏à ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤Ω Î∂àÍ∞Ä
    if (genderAgeLocked) return;
    
    setSelectedAge(ageId);
  };

  // Î†åÎçîÎßÅ Ïä§ÌÉÄÏùº ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleRenderStyleSelect = (styleId: string) => {
    // Ïû†Í∏à ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤Ω Î∂àÍ∞Ä
    if (genderAgeLocked) return;
    
    setSelectedRenderStyle(styleId);
    
    // Î†åÎçîÎßÅ Ïä§ÌÉÄÏùºÏóê Îî∞Îùº selectedStyle Í∞í ÏÑ§Ï†ï
    if (styleId === "realistic") {
      setSelectedStyle("realistic_image");
    } else if (styleId === "anime") {
      setSelectedStyle("digital_illustration");
    }
  };

  // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 300) {
        setShowScrollTop(true);
      } else {
        setShowScrollTop(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // ÏÉÅÎã®ÏúºÎ°ú Ïä§ÌÅ¨Î°§
  const scrollToTop = () => {
    topRef.current?.scrollIntoView({ behavior: 'smooth' });
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Ïπ¥Î©îÎùº Í±∞Î¶¨ ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleCameraDistanceSelect = (distanceId: string) => {
    // Ïû†Í∏à ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤Ω Î∂àÍ∞Ä
    if (genderAgeLocked) return;
    
    // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Ìï≠Î™©ÏùÑ Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ ÏÑ†ÌÉù Ìï¥Ï†ú (Îπà Î¨∏ÏûêÏó¥Î°ú ÏÑ§Ï†ï)
    if (selectedCameraDistance === distanceId) {
      setSelectedCameraDistance("");
    } else {
      setSelectedCameraDistance(distanceId);
    }
  };

  // Ïù∏Ï¢Ö Í¥ÄÎ†® ÌÇ§ÏõåÎìúÎ•º Îçî Î™ÖÌôïÌïú ÌîÑÎ°¨ÌîÑÌä∏Î°ú Îß§ÌïëÌïòÎäî Ìï®Ïàò
  const mapEthnicityKeywords = (prompt: string): string => {
    // Ïù∏Ï¢Ö Í¥ÄÎ†® ÌÇ§ÏõåÎìú Îß§Ìïë
    const ethnicityMappings: Record<string, string> = {
      'Î∞±Ïù∏': 'caucasian person, european features, fair skin',
      'ÌùëÏù∏': 'black person, african descent, dark skin',
      'ÎèôÏñëÏù∏': 'asian person, east asian features',
      'ÏïÑÏãúÏïÑÏù∏': 'asian person, east asian features',
      'ÏïÑÎûç': 'middle eastern person, arab features',
      'ÎùºÌã¥': 'latino person, hispanic features',
      'ÌûàÏä§Ìå®Îãâ': 'latino person, hispanic features',
      'Ïù∏ÎèÑÏù∏': 'indian person, south asian features',
      'ÎÇ®ÏïÑÏãúÏïÑÏù∏': 'south asian features, brown skin',
      'caucasian': 'caucasian person, european features, fair skin',
      'asian': 'asian person, east asian features',
      'black': 'black person, african descent, dark skin',
      'african': 'black person, african descent, dark skin',
      'latino': 'latino person, hispanic features',
      'hispanic': 'latino person, hispanic features',
      'middle eastern': 'middle eastern person, arab features',
      'indian': 'indian person, south asian features',
    };

    // Ï†ïÍ∑úÏãù Ìå®ÌÑ¥ÏùÑ ÏÉùÏÑ±ÌïòÏó¨ Î™®Îì† Ïù∏Ï¢Ö ÌÇ§ÏõåÎìúÎ•º Ìïú Î≤àÏóê Í≤ÄÏÉâ
    const ethnicityPattern = new RegExp('\\b(' + Object.keys(ethnicityMappings).join('|') + ')\\b', 'gi');
    
    // Îß§Ïπ≠Îêú Ïù∏Ï¢Ö ÌÇ§ÏõåÎìúÎ•º Ìï¥Îãπ Îß§ÌïëÏúºÎ°ú ÎåÄÏ≤¥
    const processedPrompt = prompt.replace(ethnicityPattern, (match) => {
      // ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂Ñ ÏóÜÏù¥ Îß§ÌïëÏùÑ Ï∞æÍ∏∞ ÏúÑÌï¥ ÏÜåÎ¨∏ÏûêÎ°ú Î≥ÄÌôò
      const key = match.toLowerCase();
      for (const [ethnicity, mapping] of Object.entries(ethnicityMappings)) {
        if (ethnicity.toLowerCase() === key) {
          return mapping;
        }
      }
      return match; // ÏùºÏπòÌïòÎäî Îß§ÌïëÏù¥ ÏóÜÏúºÎ©¥ ÏõêÎûò Îã®Ïñ¥ Ïú†ÏßÄ
    });

    return processedPrompt;
  };

  const handleClothingSelect = (clothing: string) => {
    if (selectedClothing === clothing) {
      setSelectedClothing("");
    } else {
      setSelectedClothing(clothing);
    }
  };

  const handleEyesSelect = (eyes: string) => {
    if (selectedEyes === eyes) {
      setSelectedEyes("");
    } else {
      setSelectedEyes(eyes);
    }
  };

  const handleSkinTypeSelect = (skinType: string) => {
    if (selectedSkinType === skinType) {
      setSelectedSkinType("");
    } else {
      setSelectedSkinType(skinType);
    }
  };

  const handleHairStyleSelect = (hairStyle: string) => {
    if (selectedHairStyle === hairStyle) {
      setSelectedHairStyle("");
    } else {
      setSelectedHairStyle(hairStyle);
    }
  };

  const handleSubmit = async (e: React.FormEvent, buttonType: 'generate' | 'another' | 'new' = 'generate') => {
    e.preventDefault();
    
    // Î™®Îì† ÌïÑÏàò ÏûÖÎ†• Í≤ÄÏ¶ù
    if (!prompt.trim()) {
      setModalMessage("Please enter a prompt for image generation.");
      setShowModal(true);
      return;
    }
    
    // Ïó∞Î†πÎåÄ ÏÑ†ÌÉù Í≤ÄÏ¶ù
    if (!selectedAge) {
      setModalMessage("Please select an age group.");
      setShowModal(true);
      return;
    }

    // Î†åÎçîÎßÅ Ïä§ÌÉÄÏùº ÏÑ†ÌÉù Í≤ÄÏ¶ù
    if (!selectedRenderStyle) {
      setModalMessage("Please select a rendering style.");
      setShowModal(true);
      return;
    }

    // Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÌòÑÏû¨ ÏûÖÎ†• ÏÉÅÌÉúÎ•º localStorageÏóê Ï†ÄÏû•
    if (!isSignedIn) {
      try {
        const formData = {
          prompt,
          background,
          renderStyle: selectedRenderStyle,
          gender: selectedGender,
          age: selectedAge,
          ratio: selectedRatio,
          style: selectedStyle,
          clothing: selectedClothing,
          eyes: selectedEyes,
          skinType: selectedSkinType,
          hairStyle: selectedHairStyle,
          cameraDistance: selectedCameraDistance
        };
        
        localStorage.setItem('savedGenerateFormData', JSON.stringify(formData));
        return; // Î°úÍ∑∏Ïù∏ Î™®Îã¨Ïù¥ ÌëúÏãúÎê† Í≤ÉÏù¥ÎØÄÎ°ú Ïó¨Í∏∞ÏÑú Ï§ëÎã®
      } catch (error) {
        console.error('ÌîÑÎ°¨ÌîÑÌä∏ Ï†ÄÏû• Ïò§Î•ò:', error);
      }
    }

    // ÏÇ¨Ïö©Îüâ Ï†úÌïú ÌôïÏù∏
    if (subscription && subscription.remaining <= 0) {
      setShowLimitModal(true);
      return;
    }

    setIsLoading(true);
    startLoadingProgress();
    
    // Î∞∞Í≤Ω Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ï∂îÍ∞Ä
    let fullPrompt = prompt;
    if (background.trim()) {
      fullPrompt += ` in ${background.trim()}`;
    }

    try {
      // Age Í∞í Îß§Ìïë - Î∞±ÏóîÎìúÏóêÏÑú Îçî Ï†ïÌôïÌïòÍ≤å Ï≤òÎ¶¨Ìï† Ïàò ÏûàÎèÑÎ°ù ÏÑ§Î™Ö Ï∂îÍ∞Ä
      let ageDescription = selectedAge;
      if (selectedAge === "children") {
        ageDescription = "children_5_to_10_years"; // Îçî Î™ÖÌôïÌïú Ïó∞Î†π Î≤îÏúÑ ÏßÄÏ†ï
      } else if (selectedAge === "youth") {
        ageDescription = "young_adult";
      } else if (selectedAge === "elderly") {
        ageDescription = "elderly_person_over_60, senior citizen, aged person, wrinkled skin, gray hair, older person, mature face";
      }

      // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå Î°úÍ∑∏ Ï∂úÎ†•ÌïòÎäî Ìó¨Ìçº Ìï®Ïàò Ï∂îÍ∞Ä
      const debugLog = (message: string, data?: any) => {
        // Î™®Îì† Î°úÍ∑∏ Ï∂úÎ†• ÎπÑÌôúÏÑ±Ìôî
        return;
      };

      // Í∏∞Ï°¥ console.log Ìò∏Ï∂úÏùÑ debugLogÎ°ú ÎåÄÏ≤¥
      debugLog("Selected Age:", selectedAge);
      debugLog("Age Description:", ageDescription);
      debugLog("Selected Ratio:", selectedRatio);
      debugLog("Selected Render Style:", selectedRenderStyle);
      debugLog("Submit: ÏÑ†ÌÉùÎêú ÏÑ±Î≥Ñ:", selectedGender);
      
      // ÌîÑÎ°¨ÌîÑÌä∏ Ï§ÄÎπÑ Î∞è Ïù∏Ï¢Ö Í¥ÄÎ†® ÌÇ§ÏõåÎìú Ï≤òÎ¶¨
      let enhancedPrompt = fullPrompt;
      enhancedPrompt = mapEthnicityKeywords(enhancedPrompt);
      
      // Ïã†Ï≤¥ Î∂ÄÏúÑÎÇò ÌäπÏ†ï Î∂ÄÎ∂ÑÏù¥ Ïñ∏Í∏âÎêú Í≤ΩÏö∞ Ï≤òÎ¶¨
      const bodyParts = ['leg', 'legs', 'foot', 'feet', 'hand', 'hands', 'arm', 'arms', 'head', 'face', 'body', 'torso', 'waist', 'chest', 'back'];
      const hasBodyPart = bodyParts.some(part => enhancedPrompt.toLowerCase().includes(part));
      
      if (hasBodyPart) {
        // Ïã†Ï≤¥ Î∂ÄÏúÑÍ∞Ä Ïñ∏Í∏âÎêú Í≤ΩÏö∞, Ìï¥Îãπ Î∂ÄÎ∂ÑÏóê ÏßëÏ§ëÌïòÎèÑÎ°ù ÌîÑÎ°¨ÌîÑÌä∏ ÏàòÏ†ï
        enhancedPrompt = `${enhancedPrompt}, focus on the mentioned body part, detailed shot of the specific part, professional photography`;
      } else {
        // Ï†ÑÏ≤¥ Ïù∏Î¨º Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
        if (selectedAge === "children") {
          enhancedPrompt = `${enhancedPrompt} (5-10 years old child)`;
        } else if (selectedAge === "elderly") {
          enhancedPrompt = `${enhancedPrompt} (person over 60 years old, elderly person with age-appropriate features)`;
        }
      }
      
      // ÏÑ±Î≥Ñ Ï†ïÎ≥¥Î•º ÌîÑÎ°¨ÌîÑÌä∏Ïóê Î™ÖÏãúÏ†ÅÏúºÎ°ú Ï∂îÍ∞Ä (ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ÏóêÎßå)
      if (selectedGender) {
        enhancedPrompt = selectedGender === "female" 
          ? `${enhancedPrompt}, female` 
          : `${enhancedPrompt}, male`;
      }

      // ÌîºÎ∂Ä ÌÉÄÏûÖ Ï∂îÍ∞Ä
      if (selectedSkinType) {
        const skinTonePrompts = {
          'light': 'fair skin tone, light complexion, pale skin',
          'tan': 'tan skin tone, medium complexion, golden skin',
          'dark': 'dark skin tone, deep complexion, rich melanin skin'
        };
        enhancedPrompt = `${enhancedPrompt}, ${skinTonePrompts[selectedSkinType as keyof typeof skinTonePrompts]}`;
      }
      
      // Ìó§Ïñ¥Ïä§ÌÉÄÏùº ÌîÑÎ°¨ÌîÑÌä∏ Ï∂îÍ∞Ä
      if (selectedHairStyle) {
        const hairStylePrompts = {
          'long': 'long straight hair, sleek hair, natural straight hair',
          'short': 'short hair, bob cut, modern short hairstyle',
          'wave': 'wavy hair, natural waves, soft curls',
          'slick': 'slicked back hair, model hairstyle, professional hair',
          'bangs': 'hair with bangs, front fringe, face-framing bangs',
          'no-bangs': 'no bangs, clean forehead, swept back hair'
        };
        enhancedPrompt = `${enhancedPrompt}, ${hairStylePrompts[selectedHairStyle as keyof typeof hairStylePrompts]}`;
      }
      
      // Ïï†ÎãàÎ©îÏù¥ÏÖò Ïä§ÌÉÄÏùºÏù¥ ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ï∂îÍ∞Ä
      if (selectedRenderStyle === "anime") {
        enhancedPrompt = `${enhancedPrompt}, anime style, cartoon style, animation style, high quality anime art, 2D illustration`;
      } else {
        // ÏÇ¨Ïã§Ï†Å Ïä§ÌÉÄÏùº ÌîÑÎ°¨ÌîÑÌä∏ Í∞ïÌôî
        enhancedPrompt = `${enhancedPrompt}, photorealistic, realistic photo, high quality, natural lighting, professional photography`;
      }
      
      // ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ïπ¥Î©îÎùº Í±∞Î¶¨ ÏòµÏÖòÏóê Îî∞Îùº ÌîÑÎ°¨ÌîÑÌä∏ Ï∂îÍ∞Ä
      if (selectedCameraDistance) {
        switch (selectedCameraDistance) {
          case "close_up":
            enhancedPrompt = `${enhancedPrompt}, extreme close-up shot, highly detailed close shot, extreme close portrait, focus on subject, no background, studio lighting`;
            break;
          case "medium":
            enhancedPrompt = `${enhancedPrompt}, medium shot, clear detailed medium portrait, standard framing, balanced composition`;
            break;
          case "far":
            enhancedPrompt = `${enhancedPrompt}, wide shot, full environment visible, distant perspective, environmental portrait`;
            break;
        }
      }
      
      // ÏùòÏÉÅ Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
      if (selectedClothing) {
        enhancedPrompt = `${enhancedPrompt}, ${modelStyleMapping.clothing[selectedClothing as keyof typeof modelStyleMapping.clothing]}`;
      }
      
      // Îàà ÏÉâÏÉÅ Ï∂îÍ∞Ä
      if (selectedEyes) {
        enhancedPrompt = `${enhancedPrompt}, ${modelStyleMapping.eyes[selectedEyes as keyof typeof modelStyleMapping.eyes]}, symmetrical eyes, natural looking eyes, detailed eye texture, realistic eye reflections, detailed irises, realistic eyebrows, natural eyelashes`;
      } else {
        // Îàà ÏÉâÏÉÅÏù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÎçîÎùºÎèÑ ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎààÏóê ÎåÄÌïú ÌîÑÎ°¨ÌîÑÌä∏ Ï∂îÍ∞Ä
        enhancedPrompt = `${enhancedPrompt}, symmetrical eyes, natural looking eyes, detailed eye texture, realistic eye reflections, detailed irises, realistic eyebrows, natural eyelashes`;
      }
      
      // Î∂ÄÏ†ïÏ†ÅÏù∏ ÌîÑÎ°¨ÌîÑÌä∏ Ï∂îÍ∞Ä (Í∏∞ÌòïÏ†ÅÏù∏ ÌäπÏßï Î∞©ÏßÄ)
      let negativePrompt = "deformed, distorted, disfigured, poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, disconnected limbs, mutation, mutated, ugly, disgusting, amputation, blurry, blurred, watermark, text, poorly drawn face, poorly drawn hands, missing fingers, extra fingers, fused fingers, too many fingers";
      
      // Î†åÎçîÎßÅ Ïä§ÌÉÄÏùºÏóê Îî∞Îùº Î∂ÄÏ†ïÏ†Å ÌîÑÎ°¨ÌîÑÌä∏ Ï°∞Ï†ï
      if (selectedRenderStyle === "anime") {
        negativePrompt += ", realistic face, realistic skin, 3D rendering, photorealistic, realistic lighting, realism, photorealism, realistic texture, too realistic";
      } else {
        negativePrompt += ", asymmetric eyes, unaligned eyes, crossed eyes, unrealistic eyes, cartoon eyes, anime eyes, weird eyes, disproportionate eyes, fake looking eyes, unnatural pupils, inconsistent eye color, different sized eyes, mismatched eye colors, uneven eyes, droopy eyes, googly eyes, wall-eyed, cross-eyed, strabismus, lazy eye, unfocused eyes, unrealistic iris, unrealistic pupil, artificial looking eyes";
      }
      
      debugLog("API ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞:", {
        prompt: enhancedPrompt,
        negative_prompt: negativePrompt,
        style: selectedStyle,
        size: selectedSize,
        gender: selectedGender,
        age: selectedAge,
        ratio: selectedRatio,
        renderStyle: selectedRenderStyle,
        cameraDistance: selectedCameraDistance
      });
      
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: enhancedPrompt,
          negative_prompt: negativePrompt,
          style: selectedStyle,
          size: selectedSize,
          gender: selectedGender,
          age: selectedAge,
          ratio: selectedRatio,
          renderStyle: selectedRenderStyle,
          cameraDistance: selectedCameraDistance
        }),
      });

      const result = await response.json();
      
      // ÏûêÏÑ∏Ìïú Î°úÍπÖ Ï∂îÍ∞Ä
      debugLog("API ÏùëÎãµ:", result);
      debugLog("ÏöîÏ≤≠ÌñàÎçò ÏÑ±Î≥Ñ:", selectedGender);
      debugLog("Í≤∞Í≥º ÏÑ±Î≥Ñ ÌôïÏù∏:", result.gender || "ÏùëÎãµÏóê ÏÑ±Î≥Ñ Ï†ïÎ≥¥ ÏóÜÏùå");
      
      if (!response.ok) {
        // ÏÇ¨Ïö©Îüâ Ï†úÌïú ÏùëÎãµ ÌôïÏù∏
        if (response.status === 403 && result.subscription) {
          setSubscription(result.subscription);
          setShowLimitModal(true);
          setShowLoadingModal(false);
          setIsLoading(false);
          setLoadingProgress(0); // Î°úÎî© ÏßÑÌñâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
          return;
        }
        
        // ÏóêÎü¨ Î©îÏãúÏßÄ Ï≤òÎ¶¨ Í∞úÏÑ†
        let errorMessage = result.error || "Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®";
        
        // Replicate API ÏõîÎ≥Ñ ÏßÄÏ∂ú ÌïúÎèÑ Ïò§Î•ò Ï≤òÎ¶¨
        if (errorMessage.includes("Monthly spend limit reached") || errorMessage.includes("Payment Required") || errorMessage.includes("Service usage limit")) {
          errorMessage = "Service usage limit reached. Please contact admin or try again later.";
          console.error("API service limit error:", result.error);
          
          // ÏÑúÎπÑÏä§ ÌïúÎèÑ ÏïåÎ¶º ÌëúÏãú
          setShowServiceLimitAlert(true);
          
          // ÌïúÎèÑ Ïò§Î•ò Î∞úÏÉù Ïãú Ï∂îÍ∞Ä ÏïàÎÇ¥
          setTimeout(() => {
            toast.info("Please try again later or try with different style options.");
          }, 2000);
        } else {
          console.error("API error:", errorMessage);
        }
        
        toast.error(errorMessage);
        
        // Î™®Îì† Î°úÎî© ÏÉÅÌÉú ÌôïÏã§Ìûà Ìï¥Ï†ú
        setShowLoadingModal(false);
        setIsLoading(false);
        setLoadingProgress(0); // Î°úÎî© ÏßÑÌñâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        return;
      }
      
      // Ï∂úÎ†• ÌôïÏù∏
      if (result.output) {
        debugLog("ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄ URL:", result.output);
        
        // Íµ¨ÎèÖ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        if (result.subscription) {
          setSubscription(result.subscription);
        }
        
        // Ïû†Í∏à Ìï¥Ï†ú - Í≤∞Í≥ºÍ∞Ä ÎÇòÏôÄÎèÑ Ïû†Í∏àÏùÑ Ìï¥Ï†úÌïòÏó¨ Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú ÏãúÎèÑ Í∞ÄÎä•ÌïòÎèÑÎ°ù Ìï®
        setAspectRatioLocked(false);
        setGenderAgeLocked(false);
        
        // Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏÉÅÌÉúÏóê Ï†ÄÏû•
        const newImage: GeneratedImage = {
          id: `image_${Date.now()}`,
          imageUrl: result.output,
          prompt: prompt,
          style: selectedStyle,
          renderingStyle: selectedRenderStyle,
          author: user?.username || user?.firstName || 'frr ai user',
          createdAt: new Date().toISOString(),
          gender: selectedGender,
          age: selectedAge,
          ratio: selectedRatio,
          cameraDistance: selectedCameraDistance || "medium",
          storagePath: result.storagePath || '',
          aspectRatio: result.aspectRatio || selectedRatio || '9:16' // 1:1 ÎåÄÏã† ÏÑ†ÌÉùÎêú ÎπÑÏú® ÎòêÎäî 9:16 ÏÇ¨Ïö©
        };
        
        // ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï†ÄÏû•
        saveToHistory(newImage);
        
        // Í≤∞Í≥º Î∞∞Ïó¥ ÏóÖÎç∞Ïù¥Ìä∏
        switch (buttonType) {
          case 'another':
            // Another Generate Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú (ÏÉà Í≤∞Í≥º Ï∂îÍ∞Ä)
            setResults(prevResults => [...prevResults, newImage]);
            break;
          case 'new':
            // Generate New Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú (Î™®Îì† Í≤∞Í≥º Ï¥àÍ∏∞ÌôîÌïòÍ≥† ÏÉà Í≤∞Í≥º Ï∂îÍ∞Ä)
            setResults([newImage]);
            break;
          case 'generate':
          default:
            // Generate AI Model Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú (Ï≤´ Î≤àÏß∏ Í≤∞Í≥ºÎ°ú ÏÑ§Ï†ï)
            setResults([newImage]);
            break;
        }
        
        // ÏûêÎèô Í≥µÏú† ÏΩîÎìú Ï†úÍ±∞ - ÏÇ¨Ïö©ÏûêÍ∞Ä Î™ÖÏãúÏ†ÅÏúºÎ°ú Í≥µÏú† Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï† ÎïåÎßå Í≥µÏú†ÎêòÎèÑÎ°ù Ìï®
        
        completeLoading();
      } else {
        // Ï∂úÎ†•Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
        console.error("API ÏùëÎãµÏóê outputÏù¥ ÏóÜÏäµÎãàÎã§:", result);
        toast.error("Failed to generate image. Please try again.");
        setShowLoadingModal(false);
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error(error instanceof Error ? error.message : "An error occurred while generating the image.");
      setShowLoadingModal(false); // Ïò§Î•ò Ïãú Î°úÎî© Î™®Îã¨ Îã´Í∏∞
    } finally {
      setIsLoading(false);
    }
  };

  // Í≥µÏú† Ìï∏Îì§Îü¨ Í∞úÏÑ†
  const handleShare = async (result: GeneratedImage, index: number) => {
    try {
      // Ïù¥ÎØ∏ Í≥µÏú† Ï§ëÏù¥Í±∞ÎÇò Í≥µÏú†Îêú Ïù¥ÎØ∏ÏßÄÎäî Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
      if (result.isShared) {
        toast.info('This image has already been shared.');
        // Ïù¥ÎØ∏ Í≥µÏú†Îêú Ïù¥ÎØ∏ÏßÄÎ©¥ Ïª§ÎÆ§ÎãàÌã∞ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        router.push('/community');
        return;
      }
      
      if (result.isSharing) {
        toast.info('This image is currently being shared.');
        return;
      }
      
      // Ïú†Ìö®Ìïú Ïù¥ÎØ∏ÏßÄ URL ÌôïÏù∏
      if (!result || !result.imageUrl) {
        toast.error('Image URL is missing.');
        return;
      }
      
      if (!isValidImageUrl(result.imageUrl)) {
        toast.error('Invalid image URL.');
        return;
      }
      
      // Í≥µÏú† ÏßÑÌñâ Ï§ë ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
      const updatedResults = [...results];
      updatedResults[index] = { ...updatedResults[index], isSharing: true };
      setResults(updatedResults);
      
      // Î°úÎî© ÌÜ†Ïä§Ìä∏ ÌëúÏãú
      const loadingToast = toast.loading('Sharing image...');
      
      // Í≥µÏú† API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
      const shareData = {
        image_url: result.imageUrl.trim(),
        prompt: result.prompt || '',
        rendering_style: result.renderingStyle || selectedRenderStyle || '',
        aspect_ratio: result.aspectRatio || result.ratio || '1:1', // aspectRatio ÎòêÎäî ratio ÏÇ¨Ïö©
        gender: result.gender || '',
        age: result.age || '',
        storage_path: result.storagePath || ''
      };
      
      // Í≥µÏú† API Ìò∏Ï∂ú
      const response = await fetch('/api/share', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(shareData),
      });
      
      // ÏùëÎãµ Ï≤òÎ¶¨
      let data: { success: boolean; data?: any; error?: string } = { success: false };
      
      try {
        data = await response.json();
      } catch (responseError) {
        console.error('Response processing error:', responseError);
        data = { 
          success: false, 
          error: responseError instanceof Error ? responseError.message : 'Error processing response.'
        };
      }
      
      toast.dismiss(loadingToast);
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      const newResults = [...results];
      
      if (data.success) {
        // Í≥µÏú† ÏÑ±Í≥µ
        if (index < newResults.length) {
          newResults[index] = { 
            ...newResults[index], 
            isShared: true, 
            isSharing: false,
            // API ÏùëÎãµÏóêÏÑú Î∞òÌôòÎêú ÏòÅÍµ¨ URLÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ (ÏûàÎäî Í≤ΩÏö∞)
            imageUrl: data.data?.image_url || newResults[index].imageUrl
          };
          setResults(newResults);
        }
        
        toast.success('Shared to community!');
        
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ (isShared ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï)
        if (typeof window !== 'undefined') {
          try {
            const storedImages = localStorage.getItem('generatedImages');
            if (storedImages) {
              const images = JSON.parse(storedImages);
              const updatedImages = images.map((img: any) => {
                if (img.id === result.id) {
                  return { ...img, isShared: true };
                }
                return img;
              });
              localStorage.setItem('generatedImages', JSON.stringify(updatedImages));
              
              // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Î∞úÏÉùÏãúÌÇ§Í∏∞
              window.dispatchEvent(new Event('storage'));
              window.dispatchEvent(new CustomEvent('newImageGenerated'));
            }
          } catch (e) {
            console.error('Local storage update error:', e);
          }
        }
        
        // Í≥µÏú† ÏÑ±Í≥µ ÌõÑ Ïª§ÎÆ§ÎãàÌã∞ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        setTimeout(() => {
          router.push('/community');
        }, 1000); // 1Ï¥à ÌõÑ Ïù¥Îèô
      } else {
        // Í≥µÏú† Ïã§Ìå®
        if (index < newResults.length && newResults[index]) {
          newResults[index] = { ...newResults[index], isSharing: false };
          setResults(newResults);
        }
        
        // Ïò§Î•ò Î©îÏãúÏßÄ Ï∂îÏ∂ú Î∞è ÌëúÏãú
        const errorMessage = data.error || 
          (response.ok ? 'Unknown error' : `Server error (${response.status})`);
        
        console.error("Share failed:", errorMessage);
        toast.error(`Image sharing error: ${errorMessage}`);
      }
    } catch (error) {
      // ÏóêÎü¨ Ï≤òÎ¶¨
      console.error('Error during sharing:', error);
      toast.error(`Image sharing error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      const newResults = [...results];
      const indexToUpdate = Math.min(index, newResults.length - 1);
      
      if (indexToUpdate >= 0 && indexToUpdate < newResults.length) {
        newResults[indexToUpdate] = { ...newResults[indexToUpdate], isSharing: false };
        setResults(newResults);
      }
    }
  };

  // Îã§Ïö¥Î°úÎìú Ìï®Ïàò Í∞úÏÑ†
  const handleDownload = async (imageUrl: string) => {
    try {
      // Ïú†Ìö®Ìïú Ïù¥ÎØ∏ÏßÄ URL ÌôïÏù∏
      if (!isValidImageUrl(imageUrl)) {
        toast.error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ URLÏûÖÎãàÎã§.');
        return;
      }
      
      const loadingToast = toast.loading('Ïù¥ÎØ∏ÏßÄÎ•º Îã§Ïö¥Î°úÎìúÌïòÎäî Ï§ë...');
      
      // Replicate URL Í≤ΩÍ≥† ÌëúÏãú (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
      if (process.env.NODE_ENV === 'development' && isReplicateUrl(imageUrl)) {
        console.warn('Replicate URLÏùÄ ÏùºÏãúÏ†ÅÏù¥Î©∞ Í≥ß ÎßåÎ£åÎê©ÎãàÎã§. Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§.');
      }
      
      const response = await fetch(imageUrl);
      
      if (!response.ok) {
        throw new Error(`Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Ïã§Ìå®: ${response.status} ${response.statusText}`);
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `AI_model_${Date.now()}.webp`; // webp ÌòïÏãùÏúºÎ°ú Î≥ÄÍ≤Ω
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast.dismiss(loadingToast);
      toast.success('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
      console.error('Îã§Ïö¥Î°úÎìú Ïò§Î•ò:', errorMessage);
      toast.error(`Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ïã§Ìå®: ${errorMessage}`);
    }
  };

  // Í≤∞Í≥ºÍ∞Ä ÎÇòÏôîÏùÑ Îïå Ìï¥Îãπ ÏöîÏÜåÎ°ú Ïä§ÌÅ¨Î°§
  useEffect(() => {
    if (results.length > 0 && resultRef.current) {
      // Î°úÎî©Ïù¥ ÏôÑÎ£åÎêú ÌõÑ Ïä§ÌÅ¨Î°§
      setTimeout(() => {
        resultRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, 600); // Î°úÎî© Î™®Îã¨Ïù¥ Îã´ÌûàÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÏãúÏûëÎêú ÌõÑÏóê Ïä§ÌÅ¨Î°§
    }
  }, [results]);

  // ÏòµÏÖò ÏÑπÏÖò Ï∂îÍ∞Ä
  const renderOptions = () => {
    return (
      <div className="space-y-6">
        {/* ÎπÑÏú® ÏÑ†ÌÉù UI */}
        <div className="mb-6">
          <h3 className="text-base font-medium text-gray-600 mb-3">Aspect Ratio<span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-red-50 to-rose-50 text-red-600 border border-red-100 ml-2">Required</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-gray-100 p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="flex justify-center items-center gap-6 md:gap-8">
              {IMAGE_GENERATION_CONFIG.aspectRatios.map((ratio) => (
                <button
                  key={ratio.id}
                  type="button"
                  onClick={() => handleRatioChange(ratio.id)}
                  className={`group flex flex-col items-center ${aspectRatioLocked ? "opacity-60 cursor-not-allowed" : ""}`}
                  disabled={aspectRatioLocked}
                >
                  <div 
                    className={`relative mb-2 box-border ${
                      selectedRatio === ratio.id 
                        ? "bg-gradient-to-r from-blue-400 to-indigo-500" 
                        : aspectRatioLocked ? "bg-gray-100" : "bg-white hover:bg-blue-50"
                    }`}
                    style={{
                      width: ratio.id === "16:9" ? "70px" : ratio.id === "9:16" ? "40px" : "50px",
                      height: ratio.id === "16:9" ? "40px" : ratio.id === "9:16" ? "70px" : "50px",
                      borderRadius: "10px",
                      border: selectedRatio === ratio.id ? "none" : "1px solid #e5e7eb",
                      boxShadow: selectedRatio === ratio.id ? "0 0 0 1px rgba(99, 102, 241, 0.4), 0 4px 6px -1px rgba(0, 0, 0, 0.1)" : "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
                      transition: "background-color 0.2s, box-shadow 0.2s"
                    }}
                  >
                    {selectedRatio === ratio.id && (
                      <div className="absolute inset-0 rounded-lg bg-white/20"></div>
                    )}
                  </div>
                  <span className={`text-sm ${
                    selectedRatio === ratio.id 
                      ? "text-blue-600 font-medium" 
                      : aspectRatioLocked ? "text-gray-400" : "text-gray-500 group-hover:text-gray-700"
                  }`}
                  style={{ transition: "color 0.2s" }}>
                    {ratio.id}
                  </span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Î†åÎçîÎßÅ Ïä§ÌÉÄÏùº ÏÑ†ÌÉù */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Rendering Style<span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-red-50 to-rose-50 text-red-600 border border-red-100 ml-2">Required</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-gray-100 p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="grid grid-cols-2 gap-3">
              {renderStyleOptions.map((option) => (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => handleRenderStyleSelect(option.id)}
                  className={`box-border py-3 px-4 rounded-xl ${
                    selectedRenderStyle === option.id
                      ? option.id === "realistic" 
                        ? "bg-gradient-to-r from-green-400 to-teal-500 text-white" 
                        : "bg-gradient-to-r from-purple-400 to-indigo-500 text-white"
                      : "bg-white hover:bg-gray-50 text-gray-700 border border-gray-200"
                  } ${genderAgeLocked ? "opacity-60 cursor-not-allowed" : ""}`}
                  style={{ transition: "background-color 0.2s, color 0.2s" }}
                >
                  <div className="flex flex-col items-center">
                    <span className="text-lg mb-1">{option.emoji}</span>
                    <span className="font-medium">{option.label}</span>
                    <span className="text-xs mt-1 opacity-80">{option.description}</span>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Ïó∞Î†πÎåÄ ÏÑ†ÌÉù - ÌïÑÏàò Ìï≠Î™© */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Age<span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-red-50 to-rose-50 text-red-600 border border-red-100 ml-2">Required</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-gray-200 shadow-sm overflow-hidden">
            <div className="flex items-stretch">
              {ageOptions.map((option) => (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => handleAgeSelect(option.id)}
                  className={`flex-1 py-4 px-6 transition-all duration-300 flex flex-col items-center justify-center ${
                    selectedAge === option.id 
                      ? "bg-gradient-to-r from-blue-400 to-indigo-500 text-white" 
                      : "bg-transparent text-gray-700 hover:bg-gray-100"
                  } ${genderAgeLocked ? "opacity-60 cursor-not-allowed" : ""}`}
                >
                  <div className={`w-6 h-6 rounded-full mb-2 flex items-center justify-center ${
                    selectedAge === option.id 
                      ? "bg-white" 
                      : "border border-gray-300"
                  }`}>
                    {selectedAge === option.id && (
                      <div className="w-4 h-4 rounded-full bg-blue-500"></div>
                    )}
                  </div>
                  <span className="text-sm font-medium">{option.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
        
        {/* ÏÑ±Î≥Ñ ÏÑ†ÌÉù - ÏÑ†ÌÉù Ìï≠Î™© */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Gender <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl shadow-sm border border-gray-200">
            <div className="grid grid-cols-2 gap-3">
              {genderOptions.map((option) => (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => handleGenderSelect(option.id)}
                  className={`relative group overflow-hidden option-button option-gender ${
                    selectedGender === option.id 
                      ? option.id === "male"
                        ? "bg-gradient-to-r from-blue-400 to-indigo-500 shadow-lg option-button-selected" 
                        : "bg-gradient-to-r from-purple-400 to-pink-500 shadow-lg option-button-selected"
                      : "bg-white hover:bg-gray-50"
                  } rounded-xl border border-gray-200 p-4 flex items-center justify-center`}
                  disabled={genderAgeLocked}
                >
                  <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-200 bg-gradient-to-r ${option.id === "male" ? "from-blue-400 to-indigo-500" : "from-purple-400 to-pink-500"}`}></div>
                  <div className="relative flex flex-col items-center gap-2">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      selectedGender === option.id ? "bg-white/20" : "bg-gradient-to-r from-gray-100 to-blue-100"
                    } shadow-inner border-2 border-white`}>
                      <span className="text-2xl">{option.emoji}</span>
                    </div>
                    <div className="text-center">
                      <span className={`block font-medium ${selectedGender === option.id ? "text-white" : "text-gray-700"}`}>
                        {option.label}
                      </span>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>
        
        {/* Î∞∞Í≤Ω ÏûÖÎ†• */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Background <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            <input 
              type="text"
              value={background}
              onChange={(e) => {
                setBackground(e.target.value);
                if (genderAgeLocked) {
                  setAspectRatioLocked(false);
                  setGenderAgeLocked(false);
                  setTemporaryRatio(selectedRatio);
                }
              }}
              placeholder="e.g. Musei Vatican, Sagrada Familia, beach, office"
              className="w-full p-4 border-none focus:ring-0 text-gray-800 placeholder:text-gray-400 text-sm"
              disabled={genderAgeLocked}
            />
          </div>
        </div>
        
        {/* Ïπ¥Î©îÎùº Í±∞Î¶¨ ÏÑ†ÌÉù */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Camera Distance <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl shadow-sm border border-gray-200">
            <div className="grid grid-cols-3 gap-3">
              {cameraDistanceOptions.map((option) => (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => handleCameraDistanceSelect(option.id)}
                  className={`relative group overflow-hidden option-button option-camera ${
                    selectedCameraDistance === option.id 
                      ? "bg-gradient-to-r from-blue-400 via-indigo-500 to-purple-500 shadow-lg option-button-selected" 
                      : "bg-white hover:bg-gray-50"
                  } rounded-xl border border-gray-200 p-4 flex items-center justify-center`}
                  disabled={genderAgeLocked}
                >
                  <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-200 bg-gradient-to-r from-blue-400 to-indigo-500`}></div>
                  <div className="relative flex flex-col items-center gap-2">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      selectedCameraDistance === option.id ? "bg-white/20" : "bg-gradient-to-r from-blue-100 to-indigo-100"
                    } shadow-inner border-2 border-white`}>
                      <span className="text-2xl">{option.emoji}</span>
                    </div>
                    <div className="text-center">
                      <span className={`block font-medium ${selectedCameraDistance === option.id ? "text-white" : "text-gray-700"}`}>
                        {option.label}
                      </span>
                      <span className={`block text-xs ${selectedCameraDistance === option.id ? "text-white/80" : "text-gray-500"}`}>
                        {option.description.split(',')[0]}
                      </span>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* ÌîºÎ∂Ä ÌÉÄÏûÖ ÏÑ†ÌÉù */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Skin Type <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl shadow-sm border border-gray-200">
            <div className="grid grid-cols-3 gap-3">
              {[
                { id: 'light', label: 'Light', description: 'Fair & Bright', gradient: 'from-[#FFE8D6] to-[#F8D5C2]', emoji: 'üåü' },
                { id: 'tan', label: 'Tan', description: 'Warm & Golden', gradient: 'from-[#E5C0A0] to-[#D4A373]', emoji: '‚ú®' },
                { id: 'dark', label: 'Dark', description: 'Deep & Rich', gradient: 'from-[#8B5E3C] to-[#6B4423]', emoji: 'üí´' }
              ].map((skin) => (
                <button
                  key={skin.id}
                  type="button"
                  onClick={() => handleSkinTypeSelect(skin.id)}
                  className={`relative group overflow-hidden option-button option-skin ${
                    selectedSkinType === skin.id 
                      ? "bg-gradient-to-r " + skin.gradient + " shadow-lg option-button-selected" 
                      : "bg-white hover:bg-gray-50"
                  } rounded-xl border border-gray-200 p-4 flex items-center justify-center`}
                >
                  <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-200 bg-gradient-to-r ${skin.gradient}`}></div>
                  <div className="relative flex flex-col items-center gap-2">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      selectedSkinType === skin.id ? "bg-white/20" : "bg-gradient-to-r " + skin.gradient
                    } shadow-inner border-2 border-white`}>
                      <span className="text-lg">{skin.emoji}</span>
                    </div>
                    <div className="text-center">
                      <span className={`block font-medium ${selectedSkinType === skin.id ? "text-white" : "text-gray-700"}`}>
                        {skin.label}
                      </span>
                      <span className={`block text-xs ${selectedSkinType === skin.id ? "text-white/80" : "text-gray-500"}`}>
                        {skin.description}
                      </span>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Îàà ÏÉâÏÉÅ ÏÑ†ÌÉù */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Eye Color <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl shadow-sm border border-gray-200">
            <div className="grid grid-cols-2 gap-3">
              {[
                { id: 'brown', label: 'Brown', emoji: 'üëÅÔ∏è', gradient: 'from-amber-400 to-amber-600', description: 'Warm & Natural' },
                { id: 'blue', label: 'Blue', emoji: 'üëÅÔ∏è', gradient: 'from-blue-400 to-blue-600', description: 'Deep & Clear' },
                { id: 'green', label: 'Green', emoji: 'üëÅÔ∏è', gradient: 'from-emerald-400 to-emerald-600', description: 'Rare & Unique' },
                { id: 'gray', label: 'Gray', emoji: 'üëÅÔ∏è', gradient: 'from-gray-400 to-gray-600', description: 'Soft & Mysterious' }
              ].map((color) => (
                <button
                  key={color.id}
                  type="button"
                  onClick={() => handleEyesSelect(color.id)}
                  className={`relative group overflow-hidden option-button option-eyes ${
                    selectedEyes === color.id 
                      ? "bg-gradient-to-r " + color.gradient + " shadow-lg option-button-selected" 
                      : "bg-white hover:bg-gray-50"
                  } rounded-xl border border-gray-200 p-4 flex items-center justify-center`}
                >
                  <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-200 bg-gradient-to-r ${color.gradient}`}></div>
                  <div className="relative flex items-center gap-3">
                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                      selectedEyes === color.id ? "bg-white/20" : "bg-gradient-to-r " + color.gradient
                    } shadow-inner border-2 border-white`}>
                      <span className="text-lg">{color.emoji}</span>
                    </div>
                    <div className="flex flex-col items-start">
                      <span className={`font-medium ${selectedEyes === color.id ? "text-white" : "text-gray-700"}`}>
                        {color.label}
                      </span>
                      <span className={`text-xs ${selectedEyes === color.id ? "text-white/80" : "text-gray-500"}`}>
                        {color.description}
                      </span>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Ìó§Ïñ¥ Ïä§ÌÉÄÏùº ÏÑ†ÌÉù */}
        <div>
          <h3 className="text-base font-medium mb-3 text-gray-600">Hair Style <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-purple-50 to-blue-50 text-blue-600 border border-blue-100">optional</span></h3>
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl shadow-sm border border-gray-200">
            <div className="grid grid-cols-3 gap-3">
              {[
                { id: 'long', label: 'Long Hair', description: 'Straight & Sleek', gradient: 'from-amber-400 to-amber-600', emoji: 'üë±‚Äç‚ôÄÔ∏è' },
                { id: 'short', label: 'Short Hair', description: 'Clean & Modern', gradient: 'from-blue-400 to-blue-600', emoji: 'üíá‚Äç‚ôÄÔ∏è' },
                { id: 'wave', label: 'Wavy Hair', description: 'Natural Waves', gradient: 'from-emerald-400 to-emerald-600', emoji: 'üë©‚Äçü¶±' },
                { id: 'slick', label: 'Slicked Back', description: 'Model Style', gradient: 'from-violet-400 to-violet-600', emoji: 'üßë‚Äçü¶±' },
                { id: 'bangs', label: 'With Bangs', description: 'Front Fringe', gradient: 'from-rose-400 to-rose-600', emoji: 'üë©' },
                { id: 'no-bangs', label: 'No Bangs', description: 'Clean Front', gradient: 'from-indigo-400 to-indigo-600', emoji: 'üë©‚Äçü¶∞' }
              ].map((hair) => (
                <button
                  key={hair.id}
                  type="button"
                  onClick={() => handleHairStyleSelect(hair.id)}
                  className={`relative group overflow-hidden option-button option-hairstyle ${
                    selectedHairStyle === hair.id 
                      ? "bg-gradient-to-r " + hair.gradient + " shadow-lg option-button-selected" 
                      : "bg-white hover:bg-gray-50"
                  } rounded-xl border border-gray-200 p-4 flex items-center justify-center`}
                >
                  <div className={`absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-300 bg-gradient-to-r ${hair.gradient}`}></div>
                  <div className="relative flex flex-col items-center gap-2">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      selectedHairStyle === hair.id ? "bg-white/20" : "bg-gradient-to-r " + hair.gradient
                    } shadow-inner border-2 border-white`}>
                      <span className="text-2xl">{hair.emoji}</span>
                    </div>
                    <div className="text-center">
                      <span className={`block font-medium ${selectedHairStyle === hair.id ? "text-white" : "text-gray-700"}`}>
                        {hair.label}
                      </span>
                      <span className={`block text-xs ${selectedHairStyle === hair.id ? "text-white/80" : "text-gray-500"}`}>
                        {hair.description}
                      </span>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // ÏÉùÏÑ± Î≤ÑÌäº Ïä§ÌÉÄÏùº ÏóÖÎç∞Ïù¥Ìä∏ - ÌôàÌéòÏù¥ÏßÄ Î≤ÑÌäºÍ≥º ÎèôÏùºÌïòÍ≤å Î≥ÄÍ≤Ω
  const renderGenerationButton = () => {
    return (
      <div className="mt-4 w-full">
        {isSignedIn ? (
          <button 
            onClick={(e) => handleSubmit(e)}
            disabled={isLoading}
            className={`
              w-full h-12 md:h-14 rounded-xl flex items-center justify-center gap-2 transition-all 
              ${isLoading ? 'bg-gray-300 cursor-not-allowed' : 'bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white shadow-xl hover:shadow-2xl'}
              font-medium text-sm md:text-base
            `}
          >
            {isLoading ? (
              <>
                <Sparkles className="w-5 h-5 animate-pulse" />
                <span>Creating AI Model...</span>
              </>
            ) : (
              <>
                <Sparkles className="w-5 h-5" />
                <span>Generate AI Model</span>
              </>
            )}
          </button>
        ) : (
          <SignInButton mode="modal" fallbackRedirectUrl="/generate">
            <button 
              className="w-full h-12 md:h-14 rounded-xl flex items-center justify-center gap-2 transition-all bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white shadow-xl hover:shadow-2xl font-medium text-sm md:text-base"
            >
              <Sparkles className="w-5 h-5" />
              <span>Generate AI Model</span>
            </button>
          </SignInButton>
        )}
      </div>
    );
  };

  // Ïù¥ÎØ∏ÏßÄ URLÏù¥ ÏóÜÏùÑ Îïå fallback Ïù¥ÎØ∏ÏßÄ URL ÏÇ¨Ïö©
  const getFallbackImageUrl = (imageUrl: string | null | undefined): string => {
    if (!imageUrl || imageUrl.trim() === '') {
      return '/fallback-image.png';
    }
    return imageUrl;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white overflow-x-hidden">
      {/* Î∞∞Í≤Ω Ìö®Í≥º */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bg-gradient-to-br from-blue-50/90 via-purple-50/90 to-white" />
        <div className="absolute top-0 right-0 w-[600px] h-[600px] bg-gradient-to-b from-blue-100/20 to-transparent rounded-full blur-3xl" />
        <div className="absolute bottom-0 left-0 w-[600px] h-[600px] bg-gradient-to-t from-purple-100/20 to-transparent rounded-full blur-3xl" />
      </div>
      
      {/* Î°úÎî© Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏ */}
      <LoadingModal 
        isVisible={showLoadingModal} 
        progress={loadingProgress}
        message={loadingMessage}
      />
      
      {/* Î°úÎî© Ï§ëÏùº Îïå Ï†ÑÏ≤¥ ÌôîÎ©¥ Ïò§Î≤ÑÎ†àÏù¥ ÏàòÏ†ï - Î°úÎî© Î™®Îã¨Ïù¥ Î≥¥Ïù¥ÏßÄ ÏïäÏùÑ ÎïåÎßå Ï†ÅÏö© */}
      {isLoading && !showLoadingModal && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-[4px] z-[100] pointer-events-auto" />
      )}
      <div ref={topRef}></div>
      <div className="container mx-auto md:px-4 py-8 pt-28 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="w-full max-w-3xl md:mx-auto ml-0 mr-auto"
        >
          <div className="text-center mb-8 md:mb-12 mt-6">
            <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 bg-clip-text text-transparent [line-height:1.3] md:[line-height:1.2] px-1 mb-6">
              Create Your AI Model
            </h1>
            
            {/* ÏÇ¨Ïö©Ïûê Îì±Í∏â Î∞è ÏÉùÏÑ± Í∞ÄÎä• ÌöüÏàò ÌëúÏãú - Í∞ÄÎ°ú Î∞∞ÏπòÎ°ú Î≥ÄÍ≤Ω */}
            <div className="flex flex-wrap items-center justify-center gap-2 mb-4 md:mb-6 w-full">
              <div className="flex items-center gap-2 justify-center">
                <div className={`text-sm font-medium px-3 py-1.5 rounded-full border ${
                  subscription?.tier === 'premium' 
                    ? 'bg-indigo-600 text-white border-indigo-300' 
                    : 'text-gray-700 bg-white border-gray-200'
                }`}>
                  {subscription?.tier === 'premium' ? 'Premium User' : 
                   subscription?.tier === 'starter' ? 'Starter Plan' : 'Free User'}
                </div>
                
                <SubscriptionStatus subscription={subscription} />
                
                {/* ÌûàÏä§ÌÜ†Î¶¨ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Í∞ÄÎ°ú Î∞∞ÏπòÏóê Ï∂îÍ∞Ä */}
                {history.length > 0 && (
                  <button 
                    onClick={() => setShowHistory(!showHistory)}
                    className={`inline-flex items-center gap-2 px-3 py-1.5 rounded-full transition-all duration-300 ${
                      showHistory 
                        ? "bg-gray-100 text-gray-600 hover:bg-gray-200" 
                        : "bg-blue-50 text-indigo-600 hover:bg-blue-100 border border-indigo-100"
                    }`}
                  >
                    {showHistory ? (
                      <>
                        <span className="text-sm font-medium">Hide</span>
                        <X className="w-3.5 h-3.5" />
                      </>
                    ) : (
                      <>
                        <span className="text-sm font-medium">View recent images</span>
                      </>
                    )}
                  </button>
                )}
              </div>
            </div>
            
            {/* ÌûàÏä§ÌÜ†Î¶¨ ÌÜ†Í∏Ä Î≤ÑÌäº - Í∞ÄÎ°ú Î∞∞ÏπòÎ°ú Ïù¥ÎèôÌñàÏúºÎØÄÎ°ú Ï†úÍ±∞ */}
          </div>
          
          {/* ÌûàÏä§ÌÜ†Î¶¨ ÏÑπÏÖò */}
          {showHistory && history.length > 0 && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="mb-8"
            >
              <div className="p-4 bg-white rounded-2xl shadow-sm border border-gray-100">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gradient-to-r from-indigo-50 to-blue-50 text-indigo-600 border border-indigo-100">
                      Recent Images
                      </span>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-3">
                  {history.slice(0, 2).map((item) => (
                    <div key={item.id} className="relative overflow-hidden rounded-lg border border-gray-100 bg-white shadow-sm">
                      <div className={`relative ${
                        item.ratio === "16:9" 
                          ? "aspect-video" 
                          : item.ratio === "9:16" 
                            ? "aspect-[9/16]" 
                            : "aspect-square"
                      }`}>
                        <Image
                          src={item.imageUrl}
                          alt={item.prompt}
                          fill
                          className={`${
                            item.ratio === "9:16" ? "object-contain" : "object-cover"
                          }`}
                          sizes="(max-width: 768px) 100vw, 50vw"
                        />
                      </div>
                      <div className="p-2">
                        <p className="text-xs text-gray-500 truncate">{item.prompt}</p>
                        <div className="flex justify-between items-center mt-1">
                          <div className="flex flex-wrap gap-1">
                            <span className="text-xs text-gray-500 px-1 py-0.5 bg-gray-50 rounded-full">{item.renderingStyle}</span>
                          </div>
                          <div className="flex gap-1">
                            <button 
                              onClick={() => handleDownload(item.imageUrl)}
                              className="p-1 rounded-full hover:bg-gray-100 text-gray-600"
                            >
                              <Download className="w-3.5 h-3.5" />
                            </button>
                            <button 
                              onClick={() => {
                                const historyIndex = history.findIndex(h => h.id === item.id);
                                if (historyIndex !== -1) {
                                  handleShare(item, historyIndex);
                                }
                              }}
                              className={`p-2 rounded-full flex items-center transition-all duration-200 ${
                                item.isShared 
                                  ? "bg-green-50 text-green-600 ring-1 ring-green-200" 
                                  : item.isSharing
                                  ? "bg-gray-50 text-gray-400 cursor-wait"
                                  : "bg-white hover:bg-blue-50 text-blue-500 hover:text-blue-600 hover:shadow-md"
                              }`}
                              disabled={item.isShared || item.isSharing}
                            >
                              {item.isShared 
                                ? <><span className="mr-1 text-xs">Shared</span><span className="inline-block text-sm">‚åõ</span></>
                                : item.isSharing
                                ? <><span className="mr-1 text-xs">Sharing</span><span className="inline-block animate-spin text-sm" style={{ animationDuration: '1.5s' }}>‚è≥</span></>
                                : <><span className="mr-1 text-xs">Share</span><span className="inline-block text-sm transform transition-transform hover:rotate-180 duration-300">‚è≥</span></>
                              }
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </motion.div>
          )}

          {/* ÏûÖÎ†• Î∞è ÏÉùÏÑ± Î≤ÑÌäº ÏÑπÏÖò */}
          <div className="mt-4">
            <form onSubmit={handleSubmit} className="space-y-4 md:space-y-6">
              <div className="bg-white rounded-2xl shadow-sm border border-gray-100">
                <div className="relative">
                  <textarea
                    value={prompt}
                    onChange={(e) => {
                      setPrompt(e.target.value);
                      // ÏÉà ÌÖçÏä§Ìä∏ ÏûÖÎ†• Ïãú Ïû†Í∏à Ìï¥Ï†ú
                      setAspectRatioLocked(false);
                      setGenderAgeLocked(false);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.stopPropagation(); // Ìèº Ï†úÏ∂ú Î∞©ÏßÄ
                      }
                    }}
                    placeholder="Describe the advertising model you want in detail..."
                    className="block w-full min-h-[80px] md:min-h-[120px] p-3 md:p-6 rounded-t-2xl border-none focus:ring-0 transition-all resize-none bg-transparent text-gray-800 placeholder:text-gray-400 text-sm md:text-lg whitespace-pre-wrap break-words leading-relaxed"
                    style={{ lineHeight: '1.6', letterSpacing: '0.01em' }}
                    maxLength={200}
                  />
                  
                </div>
                <div className="p-3 md:p-6 border-t border-gray-100 space-y-3 md:space-y-6">
                  {renderOptions()}
                  {renderGenerationButton()}
                </div>
              </div>
            </form>
          </div>

          {/* Î™®Îã¨ ÏúÑÏπò Î≥ÄÍ≤Ω */}
          <div className="relative">  {/* ÏÉÅÎåÄ ÏúÑÏπò Ïª®ÌÖåÏù¥ÎÑà Ï∂îÍ∞Ä */}
            {showModal && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[1000]">
                <motion.div
                  initial={{ scale: 0.9, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ duration: 0.2 }}
                  className="w-[calc(100%-2rem)] max-w-xs md:max-w-sm mx-auto bg-white rounded-xl p-4 md:p-5 shadow-xl border border-gray-100"
                >
                  <div className="text-center">
                    <div className="w-10 h-10 md:w-12 md:h-12 rounded-full bg-blue-50 mx-auto mb-3 md:mb-4 flex items-center justify-center">
                      <AlertCircle className="w-6 h-6 md:w-7 md:h-7 text-blue-500" />
                    </div>
                    <h3 className="text-base md:text-lg font-semibold text-gray-800 mb-1.5 md:mb-2">
                      Selection Required
                    </h3>
                    <p className="text-sm md:text-base text-gray-600 mb-4 md:mb-5">
                      {modalMessage}
                    </p>
                    <button
                      onClick={() => setShowModal(false)}
                      className="w-full max-w-[14rem] mx-auto block py-2 md:py-2.5 px-4 bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white rounded-lg text-sm font-medium transition-all duration-200"
                    >
                      Confirm
                    </button>
                  </div>
                </motion.div>
              </div>
            )}
          </div>

          {/* ÏÇ¨Ïö©Îüâ Ï†úÌïú Î™®Îã¨ */}
          {showLimitModal && (
            <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[1000] p-3 md:p-4">
              <motion.div
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ duration: 0.2 }}
                className="w-full max-w-sm md:max-w-md mx-auto bg-white rounded-xl p-4 md:p-6 shadow-xl border border-gray-100"
              >
                <div className="text-center">
                  <div className="w-12 h-12 md:w-16 md:h-16 rounded-full bg-red-50 mx-auto mb-4 md:mb-5 flex items-center justify-center border border-red-100">
                    <AlertCircle className="w-6 h-6 md:w-8 md:h-8 text-red-500" />
                  </div>
                  <h3 className="text-lg md:text-xl font-semibold text-gray-800 mb-2 md:mb-3">
                    Generation Limit Reached
                  </h3>
                  <p className="w-full p-0 text-xs md:text-sm bg-transparent border-none resize-none focus:ring-0 text-gray-600 placeholder:text-gray-400 mb-3 md:mb-4">
                    {subscription?.tier === 'premium'
                      ? `You've used all your premium monthly generations (${subscription?.maxGenerations} images).`
                      : subscription?.tier === 'starter'
                        ? `You've used all your starter plan monthly generations (${subscription?.maxGenerations} images).`
                        : `You've used all your free monthly generations (${subscription?.maxGenerations} images).`}
                    <br/><br/>
                    {subscription?.tier === 'premium' 
                      ? 'Your premium account provides up to 100 generations per month.'
                      : subscription?.tier === 'starter'
                        ? 'Upgrade to Premium plan for 100 generations per month!'
                        : 'Upgrade to Premium plan for 100 generations per month!'}
                    <br/><br/>
                    Next renewal: {subscription?.renewalDate ? new Date(subscription.renewalDate).toLocaleDateString() : ''}
                  </p>
                  
                  <div className="flex justify-center mt-2 space-x-2 md:space-x-3">
                    {subscription?.tier !== 'premium' && (
                      <Link href="/pricing" className="w-1/2 py-2.5 md:py-3.5 px-3 md:px-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-lg font-medium hover:from-blue-600 hover:to-indigo-600 transition-all duration-200 text-center text-xs md:text-sm touch-manipulation">
                        Upgrade to Premium
                      </Link>
                    )}
                    
                    <button
                      onClick={() => setShowLimitModal(false)}
                      className="w-1/2 py-2.5 md:py-3.5 px-3 md:px-4 border border-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-all duration-200 text-xs md:text-sm touch-manipulation"
                    >
                      Close
                    </button>
                  </div>
                </div>
              </motion.div>
            </div>
          )}

          {/* Í≤∞Í≥º ÏÑπÏÖò - ÏòÅÏñ¥Î°ú Î≥ÄÍ≤Ω */}
          {results.length > 0 && isSignedIn && (
            <motion.div 
              ref={resultRef}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="w-full mt-8 md:mt-12 overflow-x-auto pb-6"
            >
              <div className="flex flex-row justify-start md:justify-center gap-6 md:gap-8 min-w-max px-4">
                {/* Ï≤´ Î≤àÏß∏ Í≤∞Í≥º Ïπ¥Îìú */}
                <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden w-full max-w-sm mx-auto flex flex-col border border-gray-100">
                  {/* Ïù¥ÎØ∏ÏßÄ ÏÑπÏÖò */}
                  <div className="px-4 md:px-6 pt-4 md:pt-6">
                    <div className="flex justify-center">
                      <div className={`relative w-full max-w-sm overflow-hidden rounded-xl md:rounded-2xl ${
                        results[0]?.ratio === "16:9" 
                          ? "aspect-video" 
                          : results[0]?.ratio === "9:16" 
                            ? "aspect-[9/16]" 
                            : "aspect-square"
                      }`}>
                        {results[0]?.imageUrl ? (
                          <>
                            <Image
                              src={getFallbackImageUrl(results[0].imageUrl)}
                              alt={results[0].prompt || "Generated image"}
                              fill
                              className={`${
                                results[0]?.ratio === "9:16" ? "object-contain bg-gray-50" : "object-cover"
                              }`}
                              sizes="(max-width: 768px) 100vw, 50vw"
                              priority
                            />
                            <div className="absolute bottom-2 right-2 bg-white/80 backdrop-blur-sm text-gray-800 text-xs px-2 py-1 rounded-full shadow-sm border border-gray-200">
                              {results[0].ratio}
                            </div>
                          </>
                        ) : (
                          <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
                            <div className="text-center">
                              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" className="text-gray-300 mx-auto mb-2">
                                <rect width="18" height="18" x="3" y="3" rx="2" ry="2"/>
                                <circle cx="9" cy="9" r="2"/>
                                <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
                              </svg>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  {/* ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ */}
                  <div className="px-4 md:px-6 py-3 flex items-center gap-3 border-b border-gray-100 h-[54px] md:h-[60px]">
                    <div className="h-8 w-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 flex items-center justify-center">
                      <span className="text-sm font-semibold text-white">AI</span>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-800">@{user?.username || user?.firstName || 'frr ai user'}</div>
                    </div>
                  </div>
                  
                  {/* Ïª®ÌÖêÏ∏† ÏÑπÏÖò */}
                  <div className="px-4 md:px-6 py-3 flex-1">
                    <div className="flex items-center gap-2 mb-3 md:mb-4">
                      <span className="text-sm font-medium">
                        {selectedGender === "female" ? "üë©" : "üë®‚Äçüíº"}
                      </span>
                      <span className="text-sm font-medium text-gray-700">{`${selectedAge}, ${selectedGender}`}</span>
                  </div>
                    <p className="text-sm text-gray-600 leading-relaxed break-words">
                      {results && results.length > 0 ? results[0]?.prompt : ''}
                    </p>
                </div>
                  
                  {/* ÌïòÎã® Î∞î */}
                  <div className="bg-gray-50 border-t border-gray-100 px-4 md:px-6 py-3 h-[54px] md:h-[60px] flex items-center justify-between">
                    <button
                      onClick={() => results && results.length > 0 ? handleShare(results[0], 0) : null}
                      className={`flex items-center justify-center p-2.5 rounded-full transition-all duration-200 ${
                        results && results.length > 0 && results[0]?.isShared 
                          ? "bg-green-50 text-green-600 ring-1 ring-green-200" 
                          : results && results.length > 0 && results[0]?.isSharing
                          ? "bg-gray-50 text-gray-400 cursor-wait"
                          : "bg-white hover:bg-blue-50 text-blue-500 hover:text-blue-600 hover:shadow-md"
                      }`}
                      disabled={!results || results.length === 0 || results[0]?.isShared || results[0]?.isSharing}
                    >
                      {results && results.length > 0 && results[0]?.isShared 
                        ? <><span className="mr-1 text-xs">Shared</span><span className="inline-block text-sm">‚åõ</span></>
                        : results && results.length > 0 && results[0]?.isSharing
                        ? <><span className="mr-1 text-xs">Sharing</span><span className="inline-block animate-spin text-sm" style={{ animationDuration: '1.5s' }}>‚è≥</span></>
                        : <><span className="mr-1 text-xs">Share</span><span className="inline-block text-sm transform transition-transform hover:rotate-180 duration-300">‚è≥</span></>
                      }
                    </button>
                    
                    <button
                      onClick={() => results && results.length > 0 && results[0]?.imageUrl ? handleDownload(getFallbackImageUrl(results[0].imageUrl)) : null}
                      className="flex items-center gap-1.5 px-3 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors touch-manipulation border border-blue-100"
                      disabled={!results || results.length === 0 || !results[0]?.imageUrl}
                    >
                      <span className="inline-block text-sm mr-1.5">‚è±Ô∏è</span>
                      <span className="text-xs font-medium">Download</span>
                    </button>
                  </div>

                  {/* Another Generate Î≤ÑÌäº */}
                  <div className="px-4 md:px-6 py-3 border-t border-gray-100">
                    <button
                      onClick={(e) => {
                        e.preventDefault();
                        handleSubmit(e, 'another');
                      }}
                      className="w-full py-2.5 bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white rounded-lg flex items-center justify-center gap-2 transition-all duration-200"
                      disabled={isLoading}
                    >
                      <Sparkles className="w-4 h-4" />
                      <span className="font-medium">Another Generate</span>
                    </button>
                  </div>
                </div>

                {/* Îëê Î≤àÏß∏ Í≤∞Í≥º Ïπ¥Îìú (ÏûàÏùÑ Í≤ΩÏö∞) */}
                {results.length > 1 && (
                  <div className="bg-white rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden w-full max-w-sm mx-auto flex flex-col border border-gray-100">
                    {/* Ïù¥ÎØ∏ÏßÄ ÏÑπÏÖò */}
                    <div className="px-4 md:px-6 pt-4 md:pt-6">
                      <div className="flex justify-center">
                        <div className={`relative w-full max-w-sm overflow-hidden rounded-xl md:rounded-2xl ${
                          results[1]?.ratio === "16:9" 
                            ? "aspect-video" 
                            : results[1]?.ratio === "9:16" 
                              ? "aspect-[9/16]" 
                              : "aspect-square"
                        }`}>
                          {results[1]?.imageUrl ? (
                            <>
                              <Image
                                src={getFallbackImageUrl(results[1].imageUrl)}
                                alt={results[1].prompt || "Generated image"}
                                fill
                                className={`${
                                  results[1]?.ratio === "9:16" ? "object-contain bg-gray-50" : "object-cover"
                                }`}
                                sizes="(max-width: 768px) 100vw, 50vw"
                                priority
                              />
                              <div className="absolute bottom-2 right-2 bg-white/80 backdrop-blur-sm text-gray-800 text-xs px-2 py-1 rounded-full shadow-sm border border-gray-200">
                                {results[1].ratio}
                              </div>
                            </>
                          ) : (
                            <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
                              <div className="text-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" className="text-gray-300 mx-auto mb-2">
                                  <rect width="18" height="18" x="3" y="3" rx="2" ry="2"/>
                                  <circle cx="9" cy="9" r="2"/>
                                  <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
                                </svg>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    {/* ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ */}
                    <div className="px-4 md:px-6 py-3 flex items-center gap-3 border-b border-gray-100 h-[54px] md:h-[60px]">
                      <div className="h-8 w-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 flex items-center justify-center">
                        <span className="text-sm font-semibold text-white">AI</span>
                      </div>
                      <div>
                        <div className="text-sm font-medium text-gray-800">@{user?.username || user?.firstName || 'frr ai user'}</div>
                      </div>
                    </div>
                    
                    {/* Ïª®ÌÖêÏ∏† ÏÑπÏÖò */}
                    <div className="px-4 md:px-6 py-3 flex-1">
                      <div className="flex items-center gap-2 mb-3 md:mb-4">
                        <span className="text-sm font-medium">
                          {selectedGender === "female" ? "üë©" : "üë®‚Äçüíº"}
                        </span>
                        <span className="text-sm font-medium text-gray-700">{`${selectedAge}, ${selectedGender}`}</span>
                      </div>
                      <p className="text-sm text-gray-600 leading-relaxed break-words">
                        {results[1]?.prompt}
                      </p>
                    </div>
                    
                    {/* ÌïòÎã® Î∞î */}
                    <div className="bg-gray-50 border-t border-gray-100 px-4 md:px-6 py-3 h-[54px] md:h-[60px] flex items-center justify-between">
                      <button
                        onClick={() => handleShare(results[1], 1)}
                        className={`flex items-center justify-center p-2.5 rounded-full transition-all duration-200 ${
                          results[1]?.isShared 
                            ? "bg-green-50 text-green-600 ring-1 ring-green-200" 
                            : results[1]?.isSharing
                            ? "bg-gray-50 text-gray-400 cursor-wait"
                            : "bg-white hover:bg-blue-50 text-blue-500 hover:text-blue-600 hover:shadow-md"
                        }`}
                        disabled={results[1]?.isShared || results[1]?.isSharing}
                      >
                        {results[1]?.isShared 
                          ? <><span className="mr-1 text-xs">Shared</span><span className="inline-block text-sm">‚åõ</span></>
                          : results[1]?.isSharing
                          ? <><span className="mr-1 text-xs">Sharing</span><span className="inline-block animate-spin text-sm" style={{ animationDuration: '1.5s' }}>‚è≥</span></>
                          : <><span className="mr-1 text-xs">Share</span><span className="inline-block text-sm transform transition-transform hover:rotate-180 duration-300">‚è≥</span></>
                        }
                      </button>
                      
                      <button
                        onClick={() => results[1]?.imageUrl ? handleDownload(getFallbackImageUrl(results[1].imageUrl)) : null}
                        className="flex items-center gap-1.5 px-3 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors touch-manipulation border border-blue-100"
                        disabled={!results[1]?.imageUrl}
                      >
                        <span className="inline-block text-sm mr-1.5">‚è±Ô∏è</span>
                        <span className="text-xs font-medium">Download</span>
                      </button>
                    </div>

                    {/* Generate New Î≤ÑÌäº */}
                    <div className="px-4 md:px-6 py-3 border-t border-gray-100">
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          handleSubmit(e, 'new');
                        }}
                        className="w-full py-2.5 bg-gradient-to-r from-blue-500 to-teal-500 hover:from-blue-600 hover:to-teal-600 text-white rounded-lg flex items-center justify-center gap-2 transition-all duration-200"
                        disabled={isLoading}
                      >
                        <Sparkles className="w-4 h-4" />
                        <span className="font-medium">Generate New</span>
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          )}

          {/* ÏÉÅÎã®ÏúºÎ°ú Ïä§ÌÅ¨Î°§ Î≤ÑÌäº */}
          {showScrollTop && (
            <button
              onClick={scrollToTop}
              className="fixed bottom-8 right-8 p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full shadow-lg text-white hover:from-indigo-600 hover:to-purple-700 transition-all duration-300 z-50"
              aria-label="Scroll to top"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
              </svg>
            </button>
          )}

          {/* API ÏÑúÎπÑÏä§ ÌïúÎèÑ ÏïåÎ¶º Ïª¥Ìè¨ÎÑåÌä∏ */}
          {showServiceLimitAlert && (
            <ServiceLimitAlert
              isVisible={showServiceLimitAlert}
              onClose={() => setShowServiceLimitAlert(false)}
            />
          )}
        </motion.div>
      </div>
    </div>
  );
}

// SuspenseÎ°ú Í∞êÏã∏Îäî ÎûòÌçº Ïª¥Ìè¨ÎÑåÌä∏
export default function Generate() {
  return (
    <Suspense fallback={<div className="w-full py-12 text-center">Loading generator...</div>}>
      <GenerateContent />
    </Suspense>
  );
} 